// This file is generated by omniidl (C++ backend) - omniORB_4_3. Do not edit.

#include "Pacman.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

OMNI_MAYBE_UNUSED static const char* _0RL_library_version = omniORB_4_3;



void
PacmanServer::GameMap::operator>>= (cdrStream &_n) const
{
  width >>= _n;
  height >>= _n;
  _n.marshalString(map_text,0);

}

void
PacmanServer::GameMap::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)width <<= _n;
  (::CORBA::Long&)height <<= _n;
  map_text = _n.unmarshalString(0);

}

void
PacmanServer::Vec2::operator>>= (cdrStream &_n) const
{
  x >>= _n;
  y >>= _n;

}

void
PacmanServer::Vec2::operator<<= (cdrStream &_n)
{
  (::CORBA::Float&)x <<= _n;
  (::CORBA::Float&)y <<= _n;

}

void
PacmanServer::PlayerData::operator>>= (cdrStream &_n) const
{
  player_id >>= _n;
  (const Vec2&) position >>= _n;
  _n.marshalString(name,0);
  score >>= _n;
  life >>= _n;
  _n.marshalString(status,0);
  _n.marshalBoolean(immune);

}

void
PacmanServer::PlayerData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)player_id <<= _n;
  (Vec2&)position <<= _n;
  name = _n.unmarshalString(0);
  (::CORBA::Long&)score <<= _n;
  (::CORBA::Long&)life <<= _n;
  status = _n.unmarshalString(0);
  immune = _n.unmarshalBoolean();

}

void
PacmanServer::GhostData::operator>>= (cdrStream &_n) const
{
  direction >>= _n;
  (const Vec2&) position >>= _n;
  type >>= _n;

}

void
PacmanServer::GhostData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)direction <<= _n;
  (Vec2&)position <<= _n;
  (::CORBA::Long&)type <<= _n;

}

void
PacmanServer::BerryData::operator>>= (cdrStream &_n) const
{
  (const Vec2&) position >>= _n;
  _n.marshalBoolean(is_power_up);

}

void
PacmanServer::BerryData::operator<<= (cdrStream &_n)
{
  (Vec2&)position <<= _n;
  is_power_up = _n.unmarshalBoolean();

}

void
PacmanServer::GameState::operator>>= (cdrStream &_n) const
{
  server_id >>= _n;
  level_number >>= _n;
  _n.marshalBoolean(is_active);
  number_of_players >>= _n;
  (const _CORBA_Unbounded_Sequence< PlayerData > &) players >>= _n;
  number_of_ghosts >>= _n;
  (const _CORBA_Unbounded_Sequence< GhostData > &) ghosts >>= _n;
  number_of_berries >>= _n;
  (const _CORBA_Unbounded_Sequence< BerryData > &) berries >>= _n;

}

void
PacmanServer::GameState::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)server_id <<= _n;
  (::CORBA::Long&)level_number <<= _n;
  is_active = _n.unmarshalBoolean();
  (::CORBA::Long&)number_of_players <<= _n;
  (_CORBA_Unbounded_Sequence< PlayerData > &)players <<= _n;
  (::CORBA::Long&)number_of_ghosts <<= _n;
  (_CORBA_Unbounded_Sequence< GhostData > &)ghosts <<= _n;
  (::CORBA::Long&)number_of_berries <<= _n;
  (_CORBA_Unbounded_Sequence< BerryData > &)berries <<= _n;

}

PacmanServer::GameService_ptr PacmanServer::GameService_Helper::_nil() {
  return ::PacmanServer::GameService::_nil();
}

::CORBA::Boolean PacmanServer::GameService_Helper::is_nil(::PacmanServer::GameService_ptr p) {
  return ::CORBA::is_nil(p);

}

void PacmanServer::GameService_Helper::release(::PacmanServer::GameService_ptr p) {
  ::CORBA::release(p);
}

void PacmanServer::GameService_Helper::marshalObjRef(::PacmanServer::GameService_ptr obj, cdrStream& s) {
  ::PacmanServer::GameService::_marshalObjRef(obj, s);
}

PacmanServer::GameService_ptr PacmanServer::GameService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::PacmanServer::GameService::_unmarshalObjRef(s);
}

void PacmanServer::GameService_Helper::duplicate(::PacmanServer::GameService_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

PacmanServer::GameService_ptr
PacmanServer::GameService::_duplicate(::PacmanServer::GameService_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

PacmanServer::GameService_ptr
PacmanServer::GameService::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


PacmanServer::GameService_ptr
PacmanServer::GameService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

PacmanServer::GameService_ptr
PacmanServer::GameService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_GameService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_GameService* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_GameService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* PacmanServer::GameService::_PD_repoId = "IDL:PacmanServer/GameService:1.0";


PacmanServer::_objref_GameService::~_objref_GameService() {
  
}


PacmanServer::_objref_GameService::_objref_GameService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::PacmanServer::GameService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
PacmanServer::_objref_GameService::_ptrToObjRef(const char* id)
{
  if (id == ::PacmanServer::GameService::_PD_repoId)
    return (::PacmanServer::GameService_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::PacmanServer::GameService::_PD_repoId))
    return (::PacmanServer::GameService_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for PacmanServer::GameService::connect_to_server

// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_i_cstring
class _0RL_cd_740088b0f714b1fa_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_740088b0f714b1fa_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_740088b0f714b1fa_00000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  _n.marshalString(arg_1,0);

}

void _0RL_cd_740088b0f714b1fa_00000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_740088b0f714b1fa_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_740088b0f714b1fa_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_740088b0f714b1fa_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_740088b0f714b1fa_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_740088b0f714b1fa_00000000* tcd = (_0RL_cd_740088b0f714b1fa_00000000*)cd;
  PacmanServer::_impl_GameService* impl = (PacmanServer::_impl_GameService*) svnt->_ptrToInterface(PacmanServer::GameService::_PD_repoId);
  tcd->result = impl->connect_to_server(tcd->arg_0, tcd->arg_1);


}

::CORBA::Long PacmanServer::_objref_GameService::connect_to_server(::CORBA::Long version, const char* name)
{
  _0RL_cd_740088b0f714b1fa_00000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_10000000, "connect_to_server", 18);
  _call_desc.arg_0 = version;
  _call_desc.arg_1 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for PacmanServer::GameService::disconnect_from_server

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong
class _0RL_cd_740088b0f714b1fa_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_740088b0f714b1fa_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
};

void _0RL_cd_740088b0f714b1fa_20000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_740088b0f714b1fa_20000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

const char* const _0RL_cd_740088b0f714b1fa_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_740088b0f714b1fa_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_740088b0f714b1fa_20000000* tcd = (_0RL_cd_740088b0f714b1fa_20000000*)cd;
  PacmanServer::_impl_GameService* impl = (PacmanServer::_impl_GameService*) svnt->_ptrToInterface(PacmanServer::GameService::_PD_repoId);
  impl->disconnect_from_server(tcd->arg_0, tcd->arg_1);


}

void PacmanServer::_objref_GameService::disconnect_from_server(::CORBA::Long version, ::CORBA::Long player_id)
{
  _0RL_cd_740088b0f714b1fa_20000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_30000000, "disconnect_from_server", 23);
  _call_desc.arg_0 = version;
  _call_desc.arg_1 = player_id;

  _invoke(_call_desc);



}


//
// Code for PacmanServer::GameService::get_start_map

// Proxy call descriptor class. Mangled signature:
//  _cPacmanServer_mGameMap_i_clong_i_clong
class _0RL_cd_740088b0f714b1fa_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_740088b0f714b1fa_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  PacmanServer::GameMap_var result;
};

void _0RL_cd_740088b0f714b1fa_40000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_740088b0f714b1fa_40000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_740088b0f714b1fa_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const PacmanServer::GameMap&) result >>= _n;

}

void _0RL_cd_740088b0f714b1fa_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new PacmanServer::GameMap;
  (PacmanServer::GameMap&)result <<= _n;

}

const char* const _0RL_cd_740088b0f714b1fa_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_740088b0f714b1fa_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_740088b0f714b1fa_40000000* tcd = (_0RL_cd_740088b0f714b1fa_40000000*)cd;
  PacmanServer::_impl_GameService* impl = (PacmanServer::_impl_GameService*) svnt->_ptrToInterface(PacmanServer::GameService::_PD_repoId);
  tcd->result = impl->get_start_map(tcd->arg_0, tcd->arg_1);


}

PacmanServer::GameMap* PacmanServer::_objref_GameService::get_start_map(::CORBA::Long version, ::CORBA::Long level_number)
{
  _0RL_cd_740088b0f714b1fa_40000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_50000000, "get_start_map", 14);
  _call_desc.arg_0 = version;
  _call_desc.arg_1 = level_number;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for PacmanServer::GameService::update_player_status

// Proxy call descriptor class. Mangled signature:
//  void_i_clong_i_clong_i_cstring
class _0RL_cd_740088b0f714b1fa_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_740088b0f714b1fa_60000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
};

void _0RL_cd_740088b0f714b1fa_60000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  _n.marshalString(arg_2,0);

}

void _0RL_cd_740088b0f714b1fa_60000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

const char* const _0RL_cd_740088b0f714b1fa_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_740088b0f714b1fa_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_740088b0f714b1fa_60000000* tcd = (_0RL_cd_740088b0f714b1fa_60000000*)cd;
  PacmanServer::_impl_GameService* impl = (PacmanServer::_impl_GameService*) svnt->_ptrToInterface(PacmanServer::GameService::_PD_repoId);
  impl->update_player_status(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void PacmanServer::_objref_GameService::update_player_status(::CORBA::Long version, ::CORBA::Long player_id, const char* status)
{
  _0RL_cd_740088b0f714b1fa_60000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_70000000, "update_player_status", 21);
  _call_desc.arg_0 = version;
  _call_desc.arg_1 = player_id;
  _call_desc.arg_2 = status;

  _invoke(_call_desc);



}


//
// Code for PacmanServer::GameService::get_game_state

// Proxy call descriptor class. Mangled signature:
//  _cPacmanServer_mGameState_i_clong_i_clong
class _0RL_cd_740088b0f714b1fa_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_740088b0f714b1fa_80000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  PacmanServer::GameState_var result;
};

void _0RL_cd_740088b0f714b1fa_80000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_740088b0f714b1fa_80000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_740088b0f714b1fa_80000000::marshalReturnedValues(cdrStream& _n)
{
  (const PacmanServer::GameState&) result >>= _n;

}

void _0RL_cd_740088b0f714b1fa_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new PacmanServer::GameState;
  (PacmanServer::GameState&)result <<= _n;

}

const char* const _0RL_cd_740088b0f714b1fa_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_740088b0f714b1fa_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_740088b0f714b1fa_80000000* tcd = (_0RL_cd_740088b0f714b1fa_80000000*)cd;
  PacmanServer::_impl_GameService* impl = (PacmanServer::_impl_GameService*) svnt->_ptrToInterface(PacmanServer::GameService::_PD_repoId);
  tcd->result = impl->get_game_state(tcd->arg_0, tcd->arg_1);


}

PacmanServer::GameState* PacmanServer::_objref_GameService::get_game_state(::CORBA::Long version, ::CORBA::Long player_id)
{
  _0RL_cd_740088b0f714b1fa_80000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_90000000, "get_game_state", 15);
  _call_desc.arg_0 = version;
  _call_desc.arg_1 = player_id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for PacmanServer::GameService::get_player_state

// Proxy call descriptor class. Mangled signature:
//  _cPacmanServer_mPlayerData_i_clong_i_clong
class _0RL_cd_740088b0f714b1fa_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_740088b0f714b1fa_a0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  PacmanServer::PlayerData_var result;
};

void _0RL_cd_740088b0f714b1fa_a0000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_740088b0f714b1fa_a0000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_740088b0f714b1fa_a0000000::marshalReturnedValues(cdrStream& _n)
{
  (const PacmanServer::PlayerData&) result >>= _n;

}

void _0RL_cd_740088b0f714b1fa_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new PacmanServer::PlayerData;
  (PacmanServer::PlayerData&)result <<= _n;

}

const char* const _0RL_cd_740088b0f714b1fa_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_740088b0f714b1fa_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_740088b0f714b1fa_a0000000* tcd = (_0RL_cd_740088b0f714b1fa_a0000000*)cd;
  PacmanServer::_impl_GameService* impl = (PacmanServer::_impl_GameService*) svnt->_ptrToInterface(PacmanServer::GameService::_PD_repoId);
  tcd->result = impl->get_player_state(tcd->arg_0, tcd->arg_1);


}

PacmanServer::PlayerData* PacmanServer::_objref_GameService::get_player_state(::CORBA::Long version, ::CORBA::Long player_id)
{
  _0RL_cd_740088b0f714b1fa_a0000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_b0000000, "get_player_state", 17);
  _call_desc.arg_0 = version;
  _call_desc.arg_1 = player_id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}

PacmanServer::_pof_GameService::~_pof_GameService() {}


omniObjRef*
PacmanServer::_pof_GameService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::PacmanServer::_objref_GameService(ior, id);
}


::CORBA::Boolean
PacmanServer::_pof_GameService::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::PacmanServer::GameService::_PD_repoId))
    return 1;
  
  return 0;
}

const PacmanServer::_pof_GameService _the_pof_PacmanServer_mGameService;

PacmanServer::_impl_GameService::~_impl_GameService() {}


::CORBA::Boolean
PacmanServer::_impl_GameService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "connect_to_server")) {

    _0RL_cd_740088b0f714b1fa_00000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_10000000, "connect_to_server", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "disconnect_from_server")) {

    _0RL_cd_740088b0f714b1fa_20000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_30000000, "disconnect_from_server", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_start_map")) {

    _0RL_cd_740088b0f714b1fa_40000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_50000000, "get_start_map", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "update_player_status")) {

    _0RL_cd_740088b0f714b1fa_60000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_70000000, "update_player_status", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_game_state")) {

    _0RL_cd_740088b0f714b1fa_80000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_90000000, "get_game_state", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "get_player_state")) {

    _0RL_cd_740088b0f714b1fa_a0000000 _call_desc(_0RL_lcfn_740088b0f714b1fa_b0000000, "get_player_state", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
PacmanServer::_impl_GameService::_ptrToInterface(const char* id)
{
  if (id == ::PacmanServer::GameService::_PD_repoId)
    return (::PacmanServer::_impl_GameService*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::PacmanServer::GameService::_PD_repoId))
    return (::PacmanServer::_impl_GameService*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
PacmanServer::_impl_GameService::_mostDerivedRepoId()
{
  return ::PacmanServer::GameService::_PD_repoId;
}

POA_PacmanServer::GameService::~GameService() {}

