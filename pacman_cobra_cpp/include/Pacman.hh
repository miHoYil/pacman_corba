// This file is generated by omniidl (C++ backend)- omniORB_4_3. Do not edit.
#ifndef __Pacman_hh__
#define __Pacman_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Pacman
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Pacman
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Pacman
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE PacmanServer

_CORBA_MODULE_BEG

  struct GameMap {
    typedef _CORBA_ConstrType_Variable_Var<GameMap> _var_type;

    
    ::CORBA::Long width;

    ::CORBA::Long height;

    ::CORBA::String_member map_text;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef GameMap::_var_type GameMap_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< GameMap,GameMap_var > GameMap_out;

  struct Vec2 {
    typedef _CORBA_ConstrType_Fix_Var<Vec2> _var_type;

    
    ::CORBA::Float x;

    ::CORBA::Float y;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Vec2::_var_type Vec2_var;

  typedef Vec2& Vec2_out;

  enum Movement { UP, DOWN, LEFT, RIGHT /*, __max_Movement=0xffffffff */ };
  typedef Movement& Movement_out;

  enum GhostType { ORANGE, BLUE, PINK, RED /*, __max_GhostType=0xffffffff */ };
  typedef GhostType& GhostType_out;

  struct PlayerData {
    typedef _CORBA_ConstrType_Variable_Var<PlayerData> _var_type;

    
    ::CORBA::Long player_id;

    Vec2 position;

    ::CORBA::String_member name;

    ::CORBA::Long score;

    ::CORBA::Long life;

    ::CORBA::String_member status;

    ::CORBA::Boolean immune;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PlayerData::_var_type PlayerData_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PlayerData,PlayerData_var > PlayerData_out;

  struct GhostData {
    typedef _CORBA_ConstrType_Fix_Var<GhostData> _var_type;

    
    ::CORBA::Long direction;

    Vec2 position;

    ::CORBA::Long type;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef GhostData::_var_type GhostData_var;

  typedef GhostData& GhostData_out;

  struct BerryData {
    typedef _CORBA_ConstrType_Fix_Var<BerryData> _var_type;

    
    Vec2 position;

    ::CORBA::Boolean is_power_up;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef BerryData::_var_type BerryData_var;

  typedef BerryData& BerryData_out;

  struct GameState {
    typedef _CORBA_ConstrType_Variable_Var<GameState> _var_type;

    
    ::CORBA::Long server_id;

    ::CORBA::Long level_number;

    ::CORBA::Boolean is_active;

    ::CORBA::Long number_of_players;

    typedef _CORBA_Unbounded_Sequence< PlayerData >  _players_seq;
    _players_seq players;

    ::CORBA::Long number_of_ghosts;

    typedef _CORBA_Unbounded_Sequence< GhostData >  _ghosts_seq;
    _ghosts_seq ghosts;

    ::CORBA::Long number_of_berries;

    typedef _CORBA_Unbounded_Sequence< BerryData >  _berries_seq;
    _berries_seq berries;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef GameState::_var_type GameState_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< GameState,GameState_var > GameState_out;

#ifndef __PacmanServer_mGameService__
#define __PacmanServer_mGameService__
  class GameService;
  class _objref_GameService;
  class _impl_GameService;
  
  typedef _objref_GameService* GameService_ptr;
  typedef GameService_ptr GameServiceRef;

  class GameService_Helper {
  public:
    typedef GameService_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_GameService, GameService_Helper> GameService_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_GameService,GameService_Helper > GameService_out;

#endif

  // interface GameService
  class GameService {
  public:
    // Declarations for this interface type.
    typedef GameService_ptr _ptr_type;
    typedef GameService_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_GameService :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    ::CORBA::Long connect_to_server(::CORBA::Long version, const char* name);
    void disconnect_from_server(::CORBA::Long version, ::CORBA::Long player_id);
    GameMap* get_start_map(::CORBA::Long version, ::CORBA::Long level_number);
    void update_player_status(::CORBA::Long version, ::CORBA::Long player_id, const char* status);
    GameState* get_game_state(::CORBA::Long version, ::CORBA::Long player_id);
    PlayerData* get_player_state(::CORBA::Long version, ::CORBA::Long player_id);

    // Constructors
    inline _objref_GameService()  { _PR_setobj(0); }  // nil
    _objref_GameService(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_GameService();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_GameService(const _objref_GameService&);
    _objref_GameService& operator = (const _objref_GameService&);
    // not implemented

    friend class GameService;
  };

  class _pof_GameService : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_GameService() : _OMNI_NS(proxyObjectFactory)(GameService::_PD_repoId) {}
    virtual ~_pof_GameService();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_GameService :
    public virtual omniServant
  {
  public:
    virtual ~_impl_GameService();

    virtual ::CORBA::Long connect_to_server(::CORBA::Long version, const char* name) = 0;
    virtual void disconnect_from_server(::CORBA::Long version, ::CORBA::Long player_id) = 0;
    virtual GameMap* get_start_map(::CORBA::Long version, ::CORBA::Long level_number) = 0;
    virtual void update_player_status(::CORBA::Long version, ::CORBA::Long player_id, const char* status) = 0;
    virtual GameState* get_game_state(::CORBA::Long version, ::CORBA::Long player_id) = 0;
    virtual PlayerData* get_player_state(::CORBA::Long version, ::CORBA::Long player_id) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_PacmanServer
_CORBA_MODULE_BEG

  class GameService :
    public virtual PacmanServer::_impl_GameService,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~GameService();

    inline ::PacmanServer::GameService_ptr _this() {
      return (::PacmanServer::GameService_ptr) _do_this(::PacmanServer::GameService::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_PacmanServer
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(PacmanServer::Movement _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (PacmanServer::Movement& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= PacmanServer::RIGHT) {
    _e = (PacmanServer::Movement) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(PacmanServer::GhostType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (PacmanServer::GhostType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= PacmanServer::RED) {
    _e = (PacmanServer::GhostType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
PacmanServer::GameService::_marshalObjRef(::PacmanServer::GameService_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Pacman
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Pacman
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Pacman
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Pacman
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Pacman
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Pacman
#endif

#endif  // __Pacman_hh__

