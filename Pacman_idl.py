# Python stubs generated by omniidl from .\Pacman.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "PacmanServer"
#
__name__ = "PacmanServer"
_0_PacmanServer = omniORB.openModule("PacmanServer", r".\Pacman.idl")
_0_PacmanServer__POA = omniORB.openModule("PacmanServer__POA", r".\Pacman.idl")


# struct GameMap
_0_PacmanServer.GameMap = omniORB.newEmptyClass()
class GameMap (omniORB.StructBase):
    _NP_RepositoryId = "IDL:PacmanServer/GameMap:1.0"

    def __init__(self, width, height, map_text):
        self.width = width
        self.height = height
        self.map_text = map_text

_0_PacmanServer.GameMap = GameMap
_0_PacmanServer._d_GameMap  = (omniORB.tcInternal.tv_struct, GameMap, GameMap._NP_RepositoryId, "GameMap", "width", omniORB.tcInternal.tv_long, "height", omniORB.tcInternal.tv_long, "map_text", (omniORB.tcInternal.tv_string,0))
_0_PacmanServer._tc_GameMap = omniORB.tcInternal.createTypeCode(_0_PacmanServer._d_GameMap)
omniORB.registerType(GameMap._NP_RepositoryId, _0_PacmanServer._d_GameMap, _0_PacmanServer._tc_GameMap)
del GameMap

# struct Vec2
_0_PacmanServer.Vec2 = omniORB.newEmptyClass()
class Vec2 (omniORB.StructBase):
    _NP_RepositoryId = "IDL:PacmanServer/Vec2:1.0"

    def __init__(self, x, y):
        self.x = x
        self.y = y

_0_PacmanServer.Vec2 = Vec2
_0_PacmanServer._d_Vec2  = (omniORB.tcInternal.tv_struct, Vec2, Vec2._NP_RepositoryId, "Vec2", "x", omniORB.tcInternal.tv_float, "y", omniORB.tcInternal.tv_float)
_0_PacmanServer._tc_Vec2 = omniORB.tcInternal.createTypeCode(_0_PacmanServer._d_Vec2)
omniORB.registerType(Vec2._NP_RepositoryId, _0_PacmanServer._d_Vec2, _0_PacmanServer._tc_Vec2)
del Vec2

# enum Movement
_0_PacmanServer.UP = omniORB.EnumItem("UP", 0)
_0_PacmanServer.DOWN = omniORB.EnumItem("DOWN", 1)
_0_PacmanServer.LEFT = omniORB.EnumItem("LEFT", 2)
_0_PacmanServer.RIGHT = omniORB.EnumItem("RIGHT", 3)
_0_PacmanServer.Movement = omniORB.Enum("IDL:PacmanServer/Movement:1.0", (_0_PacmanServer.UP, _0_PacmanServer.DOWN, _0_PacmanServer.LEFT, _0_PacmanServer.RIGHT,))

_0_PacmanServer._d_Movement  = (omniORB.tcInternal.tv_enum, _0_PacmanServer.Movement._NP_RepositoryId, "Movement", _0_PacmanServer.Movement._items)
_0_PacmanServer._tc_Movement = omniORB.tcInternal.createTypeCode(_0_PacmanServer._d_Movement)
omniORB.registerType(_0_PacmanServer.Movement._NP_RepositoryId, _0_PacmanServer._d_Movement, _0_PacmanServer._tc_Movement)

# struct PlayerData
_0_PacmanServer.PlayerData = omniORB.newEmptyClass()
class PlayerData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:PacmanServer/PlayerData:1.0"

    def __init__(self, player_id, position, name, score, life, status):
        self.player_id = player_id
        self.position = position
        self.name = name
        self.score = score
        self.life = life
        self.status = status

_0_PacmanServer.PlayerData = PlayerData
_0_PacmanServer._d_PlayerData  = (omniORB.tcInternal.tv_struct, PlayerData, PlayerData._NP_RepositoryId, "PlayerData", "player_id", omniORB.tcInternal.tv_long, "position", omniORB.typeMapping["IDL:PacmanServer/Vec2:1.0"], "name", (omniORB.tcInternal.tv_string,0), "score", omniORB.tcInternal.tv_long, "life", omniORB.tcInternal.tv_long, "status", (omniORB.tcInternal.tv_string,0))
_0_PacmanServer._tc_PlayerData = omniORB.tcInternal.createTypeCode(_0_PacmanServer._d_PlayerData)
omniORB.registerType(PlayerData._NP_RepositoryId, _0_PacmanServer._d_PlayerData, _0_PacmanServer._tc_PlayerData)
del PlayerData

# struct GhostData
_0_PacmanServer.GhostData = omniORB.newEmptyClass()
class GhostData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:PacmanServer/GhostData:1.0"

    def __init__(self, direction, position):
        self.direction = direction
        self.position = position

_0_PacmanServer.GhostData = GhostData
_0_PacmanServer._d_GhostData  = (omniORB.tcInternal.tv_struct, GhostData, GhostData._NP_RepositoryId, "GhostData", "direction", omniORB.typeMapping["IDL:PacmanServer/Movement:1.0"], "position", omniORB.typeMapping["IDL:PacmanServer/Vec2:1.0"])
_0_PacmanServer._tc_GhostData = omniORB.tcInternal.createTypeCode(_0_PacmanServer._d_GhostData)
omniORB.registerType(GhostData._NP_RepositoryId, _0_PacmanServer._d_GhostData, _0_PacmanServer._tc_GhostData)
del GhostData

# struct BerryData
_0_PacmanServer.BerryData = omniORB.newEmptyClass()
class BerryData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:PacmanServer/BerryData:1.0"

    def __init__(self, position, is_power_up):
        self.position = position
        self.is_power_up = is_power_up

_0_PacmanServer.BerryData = BerryData
_0_PacmanServer._d_BerryData  = (omniORB.tcInternal.tv_struct, BerryData, BerryData._NP_RepositoryId, "BerryData", "position", omniORB.typeMapping["IDL:PacmanServer/Vec2:1.0"], "is_power_up", omniORB.tcInternal.tv_boolean)
_0_PacmanServer._tc_BerryData = omniORB.tcInternal.createTypeCode(_0_PacmanServer._d_BerryData)
omniORB.registerType(BerryData._NP_RepositoryId, _0_PacmanServer._d_BerryData, _0_PacmanServer._tc_BerryData)
del BerryData

# struct GameState
_0_PacmanServer.GameState = omniORB.newEmptyClass()
class GameState (omniORB.StructBase):
    _NP_RepositoryId = "IDL:PacmanServer/GameState:1.0"

    def __init__(self, server_id, level_number, is_active, number_of_players, players, number_of_ghosts, ghosts, number_of_berries, berries):
        self.server_id = server_id
        self.level_number = level_number
        self.is_active = is_active
        self.number_of_players = number_of_players
        self.players = players
        self.number_of_ghosts = number_of_ghosts
        self.ghosts = ghosts
        self.number_of_berries = number_of_berries
        self.berries = berries

_0_PacmanServer.GameState = GameState
_0_PacmanServer._d_GameState  = (omniORB.tcInternal.tv_struct, GameState, GameState._NP_RepositoryId, "GameState", "server_id", omniORB.tcInternal.tv_long, "level_number", omniORB.tcInternal.tv_long, "is_active", omniORB.tcInternal.tv_boolean, "number_of_players", omniORB.tcInternal.tv_long, "players", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:PacmanServer/PlayerData:1.0"], 0), "number_of_ghosts", omniORB.tcInternal.tv_long, "ghosts", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:PacmanServer/GhostData:1.0"], 0), "number_of_berries", omniORB.tcInternal.tv_long, "berries", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:PacmanServer/BerryData:1.0"], 0))
_0_PacmanServer._tc_GameState = omniORB.tcInternal.createTypeCode(_0_PacmanServer._d_GameState)
omniORB.registerType(GameState._NP_RepositoryId, _0_PacmanServer._d_GameState, _0_PacmanServer._tc_GameState)
del GameState

# interface GameService
_0_PacmanServer._d_GameService = (omniORB.tcInternal.tv_objref, "IDL:PacmanServer/GameService:1.0", "GameService")
omniORB.typeMapping["IDL:PacmanServer/GameService:1.0"] = _0_PacmanServer._d_GameService
_0_PacmanServer.GameService = omniORB.newEmptyClass()
class GameService :
    _NP_RepositoryId = _0_PacmanServer._d_GameService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_PacmanServer.GameService = GameService
_0_PacmanServer._tc_GameService = omniORB.tcInternal.createTypeCode(_0_PacmanServer._d_GameService)
omniORB.registerType(GameService._NP_RepositoryId, _0_PacmanServer._d_GameService, _0_PacmanServer._tc_GameService)

# GameService operations and attributes
GameService._d_get_hello = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:PacmanServer/PlayerData:1.0"], ), None)
GameService._d_connect_to_server = ((omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_long, ), None)
GameService._d_disconnect_from_server = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (), None)
GameService._d_get_start_map = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:PacmanServer/GameMap:1.0"], ), None)
GameService._d_update_player_status = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long, (omniORB.tcInternal.tv_string,0)), (), None)
GameService._d_get_game_state = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:PacmanServer/GameState:1.0"], ), None)
GameService._d_get_player_state = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:PacmanServer/PlayerData:1.0"], ), None)

# GameService object reference
class _objref_GameService (CORBA.Object):
    _NP_RepositoryId = GameService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def get_hello(self, *args):
        return self._obj.invoke("get_hello", _0_PacmanServer.GameService._d_get_hello, args)

    def connect_to_server(self, *args):
        return self._obj.invoke("connect_to_server", _0_PacmanServer.GameService._d_connect_to_server, args)

    def disconnect_from_server(self, *args):
        return self._obj.invoke("disconnect_from_server", _0_PacmanServer.GameService._d_disconnect_from_server, args)

    def get_start_map(self, *args):
        return self._obj.invoke("get_start_map", _0_PacmanServer.GameService._d_get_start_map, args)

    def update_player_status(self, *args):
        return self._obj.invoke("update_player_status", _0_PacmanServer.GameService._d_update_player_status, args)

    def get_game_state(self, *args):
        return self._obj.invoke("get_game_state", _0_PacmanServer.GameService._d_get_game_state, args)

    def get_player_state(self, *args):
        return self._obj.invoke("get_player_state", _0_PacmanServer.GameService._d_get_player_state, args)

omniORB.registerObjref(GameService._NP_RepositoryId, _objref_GameService)
_0_PacmanServer._objref_GameService = _objref_GameService
del GameService, _objref_GameService

# GameService skeleton
__name__ = "PacmanServer__POA"
class GameService (PortableServer.Servant):
    _NP_RepositoryId = _0_PacmanServer.GameService._NP_RepositoryId


    _omni_op_d = {"get_hello": _0_PacmanServer.GameService._d_get_hello, "connect_to_server": _0_PacmanServer.GameService._d_connect_to_server, "disconnect_from_server": _0_PacmanServer.GameService._d_disconnect_from_server, "get_start_map": _0_PacmanServer.GameService._d_get_start_map, "update_player_status": _0_PacmanServer.GameService._d_update_player_status, "get_game_state": _0_PacmanServer.GameService._d_get_game_state, "get_player_state": _0_PacmanServer.GameService._d_get_player_state}

GameService._omni_skeleton = GameService
_0_PacmanServer__POA.GameService = GameService
omniORB.registerSkeleton(GameService._NP_RepositoryId, GameService)
del GameService
__name__ = "PacmanServer"

#
# End of module "PacmanServer"
#
__name__ = "Pacman_idl"

_exported_modules = ( "PacmanServer", )

# The end.
